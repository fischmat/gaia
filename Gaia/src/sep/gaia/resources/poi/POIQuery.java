package sep.gaia.resources.poi;

import java.util.LinkedList;

import sep.gaia.resources.DataResource;
import sep.gaia.resources.Query;
import sep.gaia.util.FloatBoundingBox;


/**
 * A query describing POIs to be generated by a loader.
 * The set of all POIs in the database used can be restricted by defining
 * a geographical area to search in and limitations to be met by the POIs
 * that should be generated.
 * @author Matthias Fisch
 *
 */
public class POIQuery extends Query {

	/**
	 * The geographical area to retrieve POIs for.
	 * Coordinates in this box are vectors of the following
	 * configuration:  (longitude, latitude, 0).
	 */
	private FloatBoundingBox boundingBox;
	
	/**
	 * The conditions the POIs to be retrieved must fulfill.
	 */
	private POIFilter limitations;
	
	/**
	 * The name of the category the POIs resulting from this query are in.
	 */
	private String categoryName;
	
	
	/**
	 * Initializes the query by defining a bounding-box and criteria to
	 * be met by the POIs to query.
	 * @param boundingBox A bounding-box describing the geographical area.
	 * All corners must be of the following configuration: (longitude, latitude, 0).
	 * Pass <code>null</code> for no geographical restrictions.
	 * @param limitations The conditions the POIs to be retrieved must fulfill.
	 * This parameter can be <code>null</code> if all existing POIs in the specified area
	 * should be queried.
	 */
	public POIQuery(FloatBoundingBox boundingBox, POIFilter limitations) {
		/* The number of POIs that will be retrieved cannot
		 * be predicted. So a empty list of dummys must be passed:
		 */
		super(new LinkedList<DataResource>());
		this.boundingBox = boundingBox;
		this.limitations = limitations;
	}


	/**
	 * Returns the geographical area this query is targeting.
	 * @return The bounding-box of the area or <code>null</code> if there are
	 * no geographical restrictions.
	 */
	public FloatBoundingBox getBoundingBox() {
		return this.boundingBox;
	}

	/**
	 * Sets the area to target by this query.
	 * @param boundingBox A bounding-box describing the geographical area.
	 * All corners must be of the following configuration: (longitude, latitude, 0).
	 * Pass <code>null</code> for no geographical restrictions.
	 */
	public void setBoundingBox(FloatBoundingBox boundingBox) {
		this.boundingBox = boundingBox;
	}


	/**
	 * Returns the criteria POIs to be retrieved have to fulfill.
	 * @return The conditions the POIs to be retrieved must fulfill or
	 * <code>null</code> if all existing POIs in the specified area
	 * should be queried.
	 */
	public POIFilter getLimitations() {
		return this.limitations;
	}

	/**
	 * Sets the criteria to be met by POIs to be queried.
	 * @param limitations The conditions the POIs to be retrieved must fulfill.
	 * This parameter can be <code>null</code> if all existing POIs in the specified area
	 * should be queried.
	 */
	public void setLimitations(POIFilter limitations) {
		this.limitations = limitations;
	}

	/**
	 * Returns the name of the category the POIs resulting from this query are in.
	 * @return The name of the category the POIs resulting from this query are in.
	 */
	public String getCategoryName() {
		return categoryName;
	}

	/**
	 * Sets the name of the category the POIs resulting from this query are in.
	 * @param categoryName The name of the category the POIs resulting from this query are in.
	 */
	public void setCategoryName(String categoryName) {
		this.categoryName = categoryName;
	}
	
	
}

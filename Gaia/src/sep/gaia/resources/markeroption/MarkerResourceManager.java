package sep.gaia.resources.markeroption;


import java.util.HashSet;
import java.util.Set;

import javax.swing.DefaultListModel;

import sep.gaia.resources.DataResourceManager;
import sep.gaia.resources.poi.POISet;
import sep.gaia.resources.poi.PointOfInterest;
import sep.gaia.state.GLState;
import sep.gaia.state.GeoState;
import sep.gaia.state.State;
import sep.gaia.state.StateManager;
import sep.gaia.state.AbstractStateManager.StateType;
import sep.gaia.ui.MarkerPanel;
import sep.gaia.util.FloatBoundingBox;
import sep.gaia.util.FloatVector3D;

/**
 * This class is to manage a list of all the <code>MarkerResource</code>
 * generated by the user.
 * Every <code>MarkerResource</code> in this list has the same icon loaded 
 * from the <code>SymbolLoader</code>.
 * 
 * @author Michael Mitterer
 *
 */
public class MarkerResourceManager extends DataResourceManager<MarkerResource> {
	public final String label  = "Marker";
	
	/**
	 * The list of the <code>MarkerResource</code>.
	 */
	private Set<MarkerResource> markerSet;
	private POISet set;
	
	/**
	 * The side-length of a marker-icon assuming one tile per GL-unit.
	 */
	private static final float MARKER_SIDE_LEN = 0.1f;

	private DefaultListModel<String> listModel;
	private DefaultListModel<MarkerResource> markerList;
	
	
	/**
	 * The storage from where the <code>MarkerResource</code> are loaded.
	 */
	private MarkerStorage markerLoader;
	
	/**
	 * Constructor to generate a new list of <code>MarkerResource</code>
	 * which can be managed.
	 * 
	 * @param markerLoader The MarkerStorage where the markers are stored
	 * 					and loaded from.
	 */
	public MarkerResourceManager(MarkerStorage markerLoader){
		super("Marker");
		this.markerLoader = markerLoader;
		
		this.set = MarkerStorage.loadXML();
		
		this.markerSet = new HashSet<MarkerResource>();
		this.markerList = new DefaultListModel<MarkerResource>();
		this.listModel = new DefaultListModel<String>();
		
		int i = 0;
		for (PointOfInterest currentMarker : this.set) {
			this.markerSet.add((MarkerResource) currentMarker);
			this.markerList.add(i, (MarkerResource) currentMarker);
			this.listModel.add(i, ((MarkerResource) currentMarker).getName());
			i++;
		}
	}	

	/**
	 * This method adds a <code>MarkerResource</code>, e.g. a place or 
	 * a special point of interest, to the <code>markerSet</code>.
	 * 
	 * @param position The position of the <code>MarkerResource</code>
	 * to be added, i.e. the geographical longitude and latitude of 
	 * the map the <code>MarkerResource</code> to be added is situated.
	 * 
	 * @param zoom The zoom value of the marker.
	 */
	public void addMarker(FloatVector3D position, float zoom) {
		MarkerResource marker = new MarkerResource("Unbenannter Marker", position.getX(), position.getY(), zoom);
		this.markerSet.add(marker);
		this.markerList.add(markerList.getSize(), marker);
		this.listModel.add(listModel.getSize(), marker.getName());
		
		this.set.add(marker);
		MarkerStorage.storeXML(this.set);
	}
	
	/**
	 * This method removes a marker, e.g. a place or a special point of interest,
	 * from the <code>markerSet</code>.
	 * 
	 * @param position The position of the marker to be removed.
	 * 
	 * @param zoom The zoom value of the marker to be removed.
	 * 
	 * @param index The index position of the marker to be removed.
	 */
	public void removeMarker(FloatVector3D position, int zoom, int index) {
		Set<MarkerResource> tempSet = new HashSet<MarkerResource>();
		POISet tempPOISet = new POISet();
		
		for (MarkerResource res : markerSet) {
			if (!(res.getLat() == position.getX() && res.getLon() == position.getY() && res.getZoom() == position.getZ()) ) {
				tempSet.add(res);
				tempPOISet.add(res);
			}
		}
		
		this.markerSet = tempSet;
		this.set = tempPOISet;
		this.markerList.remove(index);
		this.listModel.remove(index);
		MarkerStorage.storeXML(this.set);
	}
	
	/**
	 * This method renames a marker
	 * 
	 * @param position The position of the marker
	 * @param zoom The zoom of the marker
	 * @param str The name of the marker
	 * @param index The index position of the marker
	 */
	public void renameMarker(FloatVector3D position, int zoom, String str, int index) {
		Set<MarkerResource> tempSet = new HashSet<MarkerResource>();
		POISet tempPOISet = new POISet();
		
		for (PointOfInterest res : set) {
			if (((MarkerResource)res).getLat() == position.getX() && ((MarkerResource)res).getLon() == position.getY() && ((MarkerResource)res).getZoom() == position.getZ()) {
				((MarkerResource)res).rename(str);
			}
			tempSet.add((MarkerResource) res);
			tempPOISet.add(res);
		}
		
		this.markerSet = tempSet;
		this.set = tempPOISet;
		this.markerList.get(index).rename(str);
		this.listModel.set(index, str);
		MarkerStorage.storeXML(this.set);
	}
	

	/**
	 * This method gets all the markers of the <code>markerSet</code>.
	 * 
	 * @return All markers of the <code>markerSet</code>.
	 */
	public Set<MarkerResource> getAll() {
		return markerSet;
	}

	/**
	 * This method gets all <code>MarkerResource</code> of the current 
	 * extract of the map  shown in the main window.
	 * 
	 * @param box The actual bounding box
	 * 
	 * @param zoom The current zoom value
	 * 
	 * @return All <code>MarkerResource</code> of the current extract of 
	 * the map shown in the main window.
	 */
	public Set<MarkerResource> getMarkersInArea(FloatBoundingBox box, float zoom) {
		Set<MarkerResource> set = new HashSet<MarkerResource>();
		FloatVector3D upperLeft = box.getUpperLeft();
		FloatVector3D upperRight = box.getUpperRight();
		FloatVector3D lowerLeft = box.getLowerLeft();
		FloatVector3D lowerRight = box.getLowerRight();
		
		/*
		 * The minimal and maximal values of the bounding box
		 */
		float minX = Math.min(Math.min(upperLeft.getX(), upperRight.getX()), Math.min(lowerLeft.getX(), lowerRight.getX()));
		float maxX = Math.max(Math.max(upperLeft.getX(), upperRight.getX()), Math.max(lowerLeft.getX(), lowerRight.getX()));
		float minY = Math.min(Math.min(upperLeft.getY(), upperRight.getY()), Math.min(lowerLeft.getY(), lowerRight.getY()));
		float maxY = Math.max(Math.max(upperLeft.getY(), upperRight.getY()), Math.max(lowerLeft.getY(), lowerRight.getY()));
		
		float symbolSide = 2 * MARKER_SIDE_LEN * zoom;
		
		/*
		 * Check which markers are in the actual bounding box
		 */
		for (MarkerResource marker : this.markerSet) {
			if (marker.getLon() >= minX - symbolSide
					&& marker.getLon() <= maxX + symbolSide
					&& marker.getLat() <= maxY + symbolSide
					&& marker.getLat() >= minY - symbolSide) {
				set.add(marker);
			}
		}
		return set;
	}
	
	public String getLabel () {
		return this.label;
	}

	@Override
	public void onUpdate(State state) {
		// Check if notification comes from the gl-coordinate-view of state:
		if(state != null && state instanceof GLState) {
			GLState glState = (GLState)state;
			
			if(isEnabled()) {
				notifyAll(getMarkersInArea(glState.getBoundingBox(), glState.getZoom()));
			}
		}
	}

	public DefaultListModel<MarkerResource> getMarkerList() {
		return this.markerList;
	}
	
	public DefaultListModel<String> getListModel() {
		return this.listModel;
	}

	@Override
	public void requestLoaderStop() {
		// TODO Auto-generated method stub
		
	}
}
